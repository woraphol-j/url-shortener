// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/woraphol-j/url-shortener/pkg/codegenerator (interfaces: CodeGenerator)

// Package codegenerator is a generated GoMock package.
package codegenerator

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCodeGenerator is a mock of CodeGenerator interface
type MockCodeGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockCodeGeneratorMockRecorder
}

// MockCodeGeneratorMockRecorder is the mock recorder for MockCodeGenerator
type MockCodeGeneratorMockRecorder struct {
	mock *MockCodeGenerator
}

// NewMockCodeGenerator creates a new mock instance
func NewMockCodeGenerator(ctrl *gomock.Controller) *MockCodeGenerator {
	mock := &MockCodeGenerator{ctrl: ctrl}
	mock.recorder = &MockCodeGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeGenerator) EXPECT() *MockCodeGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockCodeGenerator) Generate() (string, error) {
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate
func (mr *MockCodeGeneratorMockRecorder) Generate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockCodeGenerator)(nil).Generate))
}
